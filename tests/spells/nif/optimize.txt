Doctests for the optimize spell
===============================

Interactive
-----------


>>> import os
>>> from os.path import dirname
>>> dirpath = __file__
>>> for i in range(3): #recurse up to root repo dir
...     dirpath = dirname(dirpath)
>>> repo_root = dirpath
>>> script_dir = os.path.join(repo_root, "scripts", "nif")
>>> import sys
>>> script = os.path.join(script_dir, "niftoaster.py")
>>> sys.path.insert(-1, script_dir.replace("\\\\", "/"))
>>> nif_dir = "tests/spells/nif/files/"
>>> file_name = "test.nif"
>>> file_name_full = nif_dir + file_name
>>> nif_dir_out = nif_dir + "out/"
>>> file_name_out = "_test.nif"
>>> file_name_full_out = nif_dir_out + file_name_out


>>> # this inputfunc hack is very ugly but it allows to simulate user input
>>> inputlist = ["yes it is", "n", "y"] # list of inputs of this test
>>> def inputfunc(msg = ""):
...     result = inputlist.pop(0)
...     print("%s%s" % (msg, result))
...     return result
>>> inputfunc("is the input working? ")
is the input working? yes it is
'yes it is'
>>> import pyffi.spells
>>> pyffi.spells.Toaster.toast.__globals__['input'] = inputfunc
>>> # copy file to avoid overwriting
>>> import shutil
>>> shutil.copyfile(file_name_full, file_name_full_out)
'tests/spells/nif/files/out/_test.nif'
>>> # simulate calling "niftoaster.py optimize --verbose=1 ..._test.nif"

>>> import niftoaster
>>> sys.argv = ["niftoaster.py", "optimize", "--verbose=1", file_name_full_out]
>>> niftoaster.NifToaster().cli() # doctest: +ELLIPSIS +REPORT_NDIFF
pyffi.toaster:WARNING:This script will modify your files, in particular if something goes wrong it may destroy them.
pyffi.toaster:WARNING:Make a backup of your files before running this script.
Are you sure that you want to proceed? [n/y] n
pyffi.toaster:INFO:Script aborted by user.
pyffi.toaster:INFO:Finished.
>>> niftoaster.NifToaster().cli() # doctest: +ELLIPSIS +REPORT_NDIFF
pyffi.toaster:WARNING:This script will modify your files, in particular if something goes wrong it may destroy them.
pyffi.toaster:WARNING:Make a backup of your files before running this script.
Are you sure that you want to proceed? [n/y] y
pyffi.toaster:INFO:=== tests/spells/nif/files/out/_test.nif ===
pyffi.toaster:INFO:  --- fix_delunusedroots & opt_cleanreflists & fix_detachhavoktristripsdata & fix_texturepath & fix_clampmaterialalpha & fix_bhksubshapes & fix_emptyskeletonroots ---
pyffi.toaster:INFO:    ~~~ NiNode [test] ~~~
pyffi.toaster:INFO:      ~~~ NiTriShape [Cube] ~~~
pyffi.toaster:INFO:  --- opt_geometry ---
pyffi.toaster:INFO:    ~~~ NiNode [test] ~~~
pyffi.toaster:INFO:      ~~~ NiTriShape [Cube] ~~~
pyffi.toaster:INFO:        removing duplicate vertices
pyffi.toaster:INFO:        (num vertices was 8 and is now 8)
pyffi.toaster:INFO:        optimizing triangle ordering
pyffi.toaster:INFO:        (ATVR stable at 1.000)
pyffi.toaster:INFO:        optimizing vertex ordering
pyffi.toaster:INFO:  --- opt_mergeduplicates ---
pyffi.toaster:INFO:    ~~~ NiNode [test] ~~~
pyffi.toaster:INFO:      ~~~ NiTriShape [Cube] ~~~
pyffi.toaster:INFO:        ~~~ NiTriShapeData [] ~~~
pyffi.toaster:INFO:  overwriting tests/spells/nif/files/out..._test.nif
pyffi.toaster:INFO:Finished.
>>> # clean up
>>> import os
>>> os.remove(file_name_full_out)

Non-interactive
---------------

>>> # copy file to avoid overwriting
>>> import shutil
>>> shutil.copyfile(file_name_full, file_name_full_out)
'tests/spells/nif/files/out/_test.nif'
>>> # simulate calling "niftoaster.py optimize --verbose=1 .../_test.nif"
>>> import niftoaster
>>> sys.argv = ["niftoaster.py", "optimize", "--noninteractive", "--verbose=1", file_name_full_out]
>>> niftoaster.NifToaster().cli() # doctest: +ELLIPSIS +REPORT_NDIFF
pyffi.toaster:INFO:=== tests/spells/nif/files/out/_test.nif ===
pyffi.toaster:INFO:  --- fix_delunusedroots & opt_cleanreflists & fix_detachhavoktristripsdata & fix_texturepath & fix_clampmaterialalpha & fix_bhksubshapes & fix_emptyskeletonroots ---
pyffi.toaster:INFO:    ~~~ NiNode [test] ~~~
pyffi.toaster:INFO:      ~~~ NiTriShape [Cube] ~~~
pyffi.toaster:INFO:  --- opt_geometry ---
pyffi.toaster:INFO:    ~~~ NiNode [test] ~~~
pyffi.toaster:INFO:      ~~~ NiTriShape [Cube] ~~~
pyffi.toaster:INFO:        removing duplicate vertices
pyffi.toaster:INFO:        (num vertices was 8 and is now 8)
pyffi.toaster:INFO:        optimizing triangle ordering
pyffi.toaster:INFO:        (ATVR stable at 1.000)
pyffi.toaster:INFO:        optimizing vertex ordering
pyffi.toaster:INFO:  --- opt_mergeduplicates ---
pyffi.toaster:INFO:    ~~~ NiNode [test] ~~~
pyffi.toaster:INFO:      ~~~ NiTriShape [Cube] ~~~
pyffi.toaster:INFO:        ~~~ NiTriShapeData [] ~~~
pyffi.toaster:INFO:  overwriting tests/spells/nif/files/out..._test.nif
pyffi.toaster:INFO:Finished.
>>> # clean up
>>> import os
>>> os.remove(file_name_full_out)