Doctests for the opt_collisiongeometry spell's vertex based collision to bhkBoxShape transformation function
============================================

NifToaster check
----------------

>>> from pyffi.formats.nif import NifFormat
>>> import pyffi.spells.nif.optimize
>>> data = NifFormat.Data()
>>> stream = open("tests/nif/test_opt_collision_to_boxshape.nif", "rb")
>>> data.read(stream)
>>> # check initial data
>>> data.roots[0].collision_object.body.shape.sub_shapes[0].num_vertices
8
>>> data.roots[0].collision_object.body.shape.data.num_vertices
8
>>> data.roots[0].collision_object.body.shape.sub_shapes[0].material
0
>>> # run the spell that optimizes this
>>> spell = pyffi.spells.nif.optimize.SpellOptimizeCollisionGeometry(data=data)
>>> spell.recurse()
pyffi.toaster:INFO:--- opt_collisiongeometry ---
pyffi.toaster:INFO:  ~~~ NiNode [Scene Root] ~~~
pyffi.toaster:INFO:    ~~~ bhkCollisionObject [] ~~~
pyffi.toaster:INFO:      ~~~ bhkRigidBodyT [] ~~~
pyffi.toaster:INFO:        optimized box collision
pyffi.toaster:INFO:    ~~~ NiNode [Door] ~~~
pyffi.toaster:INFO:      ~~~ NiTriStrips [Door] ~~~
pyffi.toaster:INFO:        ~~~ NiTriStripsData [] ~~~
pyffi.toaster:INFO:      ~~~ NiTriStrips [Door] ~~~
pyffi.toaster:INFO:        ~~~ NiTriStripsData [] ~~~
pyffi.toaster:INFO:    ~~~ NiNode [WoodBeam01] ~~~
pyffi.toaster:INFO:      ~~~ NiTriStrips [WoodBeam01] ~~~
pyffi.toaster:INFO:        ~~~ NiTriStripsData [] ~~~
pyffi.toaster:INFO:    ~~~ NiNode [WoodBeam02] ~~~
pyffi.toaster:INFO:      ~~~ NiTriStrips [WoodBeam02] ~~~
pyffi.toaster:INFO:        ~~~ NiTriStripsData [] ~~~
pyffi.toaster:INFO:    ~~~ NiNode [WoodBeam03] ~~~
pyffi.toaster:INFO:      ~~~ NiTriStrips [WoodBeam03] ~~~
pyffi.toaster:INFO:        ~~~ NiTriStripsData [] ~~~
pyffi.toaster:INFO:    ~~~ NiNode [Rusty Metal Bottom] ~~~
pyffi.toaster:INFO:      ~~~ NiTriStrips [Rusty Metal Bottom] ~~~
pyffi.toaster:INFO:        ~~~ NiTriStripsData [] ~~~
pyffi.toaster:INFO:    ~~~ NiNode [Rusty Metal Top] ~~~
pyffi.toaster:INFO:      ~~~ NiTriStrips [Rusty Metal Top] ~~~
pyffi.toaster:INFO:        ~~~ NiTriStripsData [] ~~~
>>> # check optimized data
>>> data.roots[0].collision_object.body.shape.material
0
>>> isinstance(data.roots[0].collision_object.body.shape, NifFormat.bhkBoxShape)
True
